jherskow
321658379
Joshua Herskowitz

=======================================================================
=                     README for ex10:   Wikipedia™                   =
=======================================================================

======================================================
=                   Description:                     =
======================================================
In this exercise, we create a network that represents
a wiki-like linked database of articles, and store it
in a graph-like data structure.

We then implement various functions that provide us
with different data-analysis tools with which to
study the intricate connections of the network.

======================================================
=                    Files:                          =
======================================================

======== ARITCLE.PY ====

++++ class ARTICLE ++++++
A class representing an article.
An article has a title,
and a list of neighboring article objects.

==main functions==
init                  -Constructor.
get_title             -You guessed it.
add_neighbor          -You guessed it.
get_neighbors         -Returns a list of neighbors' *titles*

repr, len and contains are defined
in accordance with python guidelines.

Note that containment of another article
is checked by article object, not title.

======== WIKINETWOK.PY ====

==functions==

read_article_links       -Converts text file of compatible format into
                          a list of article-pair tuples, compatible with
                          the wikinetwork constructor.
sort_dict_by_rank        -Sorts a dictionary of titles and ranks, first by rank
                          then by title alphabetically.
                          Can return a list or the top element, based on input.
title_list               -Returns a list of titles from a list of articles.


++++ class WIKINETWORK ++++++
A graph-like data structure,
representing the connectivity of a wikipedia-like
collection of articles.
(articles are stored as a dictionary of
titles and article objects.)

==main functions==
init                    -Constructor.
update_network          -Updates the network with new connections given by
                         article neighbor pairs in a similar
get_articles            -Returns a list of neighbors' objects
get_titles              -Returns a list of neighbors' *titles*

page_rank -             -Ranks all pages using the Page Rank algorithm.
jaccard_index           -Returns a list of article titles, sorted by
                         descending jaccard index in relation to the given article.
travel_path_iterator    -Generates a path from a given title than runs along the
                         articles with the highest entry index.
                        -The generator returns the title of the highest entry index
                         with each iteration.

friends_by_depth        -Returns a list of titles of all articles within x 'jumps'
                         from a given article.


_update_entry_index     -Updates the private variable dictionary that evaluates the
                         entry index of all articles.
_recursive_friends_set


repr, len, get_item, and contains are defined
in accordance with python guidelines.

Note that containment of another article
is checked by article title, unlike class article.

==================================================================================
=                                 EX10 Q & A                                      =
==================================================================================

---  TOP 3 PAGES BY PAGERANK™ - (d=0.9, iter=50)-------------------------
# 1 United_States
# 2 France
# 3 Europe
(My guess is this is mostly because of World War II, and the wealth
 of american sources on the subject)
-----------------------------------------------------------------------

--- HIGHEST JACCARD INDEX - (other than self)--------------------------
The_Simpsons          -> Tuvalu                  (confusing)
The_Godfather         -> Citizen_Kane
Louis_XIV_of_France   -> William_III_of_England
The_Lord_of_the_Rings -> J._R._R._Tolkien        (less confusing)
-----------------------------------------------------------------------

--- FRIEND % OF NETWORK, BY DEPTH ------------------------------------
('United_States', 1)           295 / 4581 = 0.06439641999563414 = 6.439641999563414%
('United_States_dollar', 2)    918 / 4581 = 0.20039292730844793 = 20.039292730844792%
('Microsoft', 3)               2532 / 4581 = 0.5527177472167649 = 55.27177472167649%
-----------------------------------------------------------------------

=====================================================================================
=                            Colleagues and Resources                               =
=====================================================================================

